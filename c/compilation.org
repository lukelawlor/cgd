<2023-12-24 Sun> Note: so far this file only details what was covered in meetings. I will add much more content to it later.

* The C compilation process
If you are writing your program entirely in one file, compiling your program with this shell command will do:

#+begin_src sh
	cc file.c -o executable_name
#+end_src

If you split your code across /multiple/ *source files* (.c files) and *header files* (.h files), however, you may want to understand the compilation process at a deeper level. That is what this document will detail.

** Translation units and object files
A *translation unit* or *compilation unit* is a collection of source code that the compiler reads to output an object file. A translation unit is made up of a source file and all of the header files it may include.

An *object file* (.o file) contains the machine code of a translation unit. One or more object files are fed to the *linker*, a program which will link data, such as function calls between object files, to output the final executable of a program.

** Producing direct object files
When you run this command:

#+begin_src sh
	cc file.c -o executable_name
#+end_src

The compiler will produce object files and link them automatically for you. To only produce object files and skip linking, use the =-c= flag:

#+begin_src sh
	cc -c file.c
#+end_src

This will produce the object file =file.o=. If you want to explicitly choose the object file name, use the =-o= flag:

#+begin_src sh
	cc -c file.c -o file.o
#+end_src

** Linking object files to produce an executable
To produce an executable using all of your object files, run this command:

#+begin_src sh
	cc file.o -o program
#+end_src

This command will produce the executable file =program=. You may insert as many object file names before =-o= as you like.

* Linkage
*Linkage* is a property of variables and functions that determines if they can be accessed in different source files that are to be compiled and linked into one program.

There are two types of linkage: internal and external.

Variables and functions with *internal linkage* can only be accessed in the translation unit they are defined in. See [[static][here]] to learn how to declare variables and functions with this linkage.

Variables and functions with *external linkage* can be accessed in every translation unit.

** Using functions across different source files
*** Demonstrational code
To use /any/ function or variable across different source files (which will be included in different translation units), the function or variable needs to have external linkage.

By default, all functions have external linkage.

Here is some code to illustrate this:

<<external_linkage_demo>>

This is my file =sum.c=, which contains the definition for the function =sum=:

#+begin_src C
	// Returns the sum of two integers
	int sum(int x, int y)
	{
		return x + y;
	}
#+end_src

This is my file =main.c=:

#+begin_src C
	#include <stdio.h>

	// Returns the sum of two integers
	int sum(int x, int y);

	int main(void)
	{
		printf("The sum of 2 and 3 is %d\n", sum(2, 3));
		return 0;
	}
#+end_src

I will use both of these source files in the same program, which I will compile with the following shell commands:

#+begin_src sh
	gcc -c sum.c
	gcc -c main.c
	gcc sum.o main.o -o program
#+end_src

This should work perfectly fine. Functions have external linkage by default, therefore =sum= has external linkage so I am able to call it from =main.c= even if it is defined in =sum.c=. The program links successfully with the execution of the last command because the linker was able to find the definition of =sum= in =sum.o=.

If I left =sum.o= out of the final compile command, I would see a linker error such as this:

#+begin_src text
/usr/lib/gcc/x86_64-pc-linux-gnu/13/../../../../x86_64-pc-linux-gnu/bin/ld: main.o: in function `main':
main.c:(.text+0xf): undefined reference to `sum'
collect2: error: ld returned 1 exit status
#+end_src

It is the *linker*'s job to handle linkage of variables and functions, not the compiler's job. That is why we get a linker error. You can typically tell a linker error apart from a compiler error because linker errors contain some reference to the program =ld=, which is the linker on UNIX.

*** The problem with our code and the solution
While our example code /does/ work, it has some flaws that become apparent when we begin adding more to our program.

What if we wanted to include more source files that used the =sum= function? We would need to copy and paste the function prototype of =sum= in each of these files. That would be a violation of the DRY principle: don't repeat yourself. Violating DRY means your program will be harder to modify. If we wanted to change the arguments of =sum=, we would need to find every occurence of =sum='s prototypes and change them as well!

The solution is to store the function prototype for =sum= in a [[header_files][header file]], which we will cover in the next section.

** Header files
<<header_files>>

*Header files* (ending in .h), or *headers*, are files that contain commonly re-used code to be =#include='d at the top of other header or source files in our program, hence the name.

As we learn more about different C concepts, we will need to know whether the lines of code they involve should go in header or source files. Generally, code statements (instructions that cause the computer to actually execute something) go in source files, and information for the compiler to use, such as function prototypes, goes in header files.

*** Using function prototypes in header files
Function prototypes for functions with external linkage are best placed in header files.

**** Demonstrational code
Building on our [[external_linkage_demo][previous code for demonstrating use of functions with external linkage]], I will create a new header file =sum.h=:

#+begin_src C
	// Returns the sum of two integers
	int sum(int x, int y);
#+end_src

Now, instead of writing the raw function prototype into =main.c=, I can simply =#include= =sum.h= in =main.c=:

#+begin_src C
	#include <stdio.h>

	#include "sum.h" // For sum()

	int main(void)
	{
		printf("The sum of 2 and 3 is %d\n", sum(2, 3));
		return 0;
	}
#+end_src

It is a convention to name your header files after the source file they are related to. I named the header file =sum.h= because it contains the function prototype for =sum=, whose function definition is in =sum.c=.

**** #include paths
Notice how I used double quotes around =sum.h= in the =#include= statement. These indicate that =sum.h= is a relative path. Any path enclosed in double quotes indicates a path relative to the directory that the file containing the =#include= statement is in.

Any path enclosed in angle brackets =<>=, such as =stdio.h=, is relative to the include directories available to the compiler. The compiler will search for the named file and error if it isn't found in any of the include directories.

On UNIX, =/usr/include= is one of these directories. You can add to this list of directories by running the compiler with the =-I= option. For example, passing =-I.= will add the working directory to the list of include directories.

See [[../unix/shell.org][this document]] for an explanation of relative vs absolute paths.

**** #include comments
I added the comment "For sum()" after =#include='ing =sum.h= to make my intentions clearer. I recommend that you do the same in commenting what you need from each header file.

The more code we add to =sum.h=, the harder it is to tell which functions need to be used by which source files. Also, if we want to move a function prototype from =sum.h= to some other header file, our comments will let us know which files need their =#include= statements altered accordingly.

**** The benefits of header files
Header files allow us to follow the DRY (don't repeat yourself) principle. With them, we can avoid rewriting the same function prototypes where they are needed. We can also update our function prototypes everywhere they are used by just changing them in one file.

*** Header guards
A *header guard* or *include guard* is a mechanism that prevents a header file from being included more than once in one translation unit. Not using one can cause errors.

So far, we only know to add function prototypes to our header files. No errors occur if these are repeated, however, code that we will later learn to place in header files /can/ cause errors when repeated.

**** Traditional #ifndef ... #endif guards
The standard way to implement header guards is to use the =#ifndef=, =#define= and =#endif= preprocessor statements like so:

=sum.h=:

#+begin_src C
	#ifndef SUM_H
	#define SUM_H

	// Returns the sum of two integers
	int sum(int x, int y);

	#endif
#+end_src

The =#ifndef= statement is short for "if not defined." It checks if the symbol it is given (in this case =SUM_H=) is not defined. If it isn't, the section of code spanning from just after =#ifndef= to the next =#endif= is kept in the file. If the symbol /is/ defined, this section of code is deleted.

When =sum.h= is included for the first time in a translation unit, =SUM_H= shouldn't be defined, so the code between =#ifndef= and =#endif= is kept. The next time =sum.h= is included, =SUM_H= should already be defined, so the rest of the code in the header file is ignored.

You can name the symbol that =#ifndef= checks whatever you want, as long as you're sure it won't be defined before the header file is included for the first time. A common convention is to name it the header file's filename in all uppercase, replacing =.h= with =_H=.

Be careful not to reuse the same symbol for different header files. If you have two header files with the same filename in your project, but they are stored in different directories, you may want to include the directory name in the symbol in the header guard. For example, a file =a.h= in the directory =b= could use the symbol =B_A_H=.

FYI, there is an =#ifdef= preprocessor statement you can use, which does the same thing as =#ifndef= but keeps the next code section if the symbol /is/ defined.

**** #pragma once
You can use the preprocessor statement =#pragma once= to implement a header guard:

=sum.h=:

#+begin_src C
	#pragma once

	// Returns the sum of two integers
	int sum(int x, int y);
#+end_src

This is easier to type than a traditional header guard and lets you skip having to name a symbol to be used for the =#ifndef= statement. A downside to this approach, however, is that the =#pragma= statement is not standardized in the C language, so you need to verify that the compiler you use supports it.

** Using global variables across different source files
<<extern_declarations>>

All global variables have external linkage by default. To access a global variable from a source file where it is not declared, you need an extern declaration.

An *extern declaration* tells the compiler about _the potential existence_ of a global variable that could be in another translation unit of the program. It is not an actual declaration of a variable. All an extern declaration does is stop the compiler from erroring when it sees use of a variable that wasn't declared in the current translation unit.

To write an extern declaration, simply write a declaration statement for your global variable and prepend it with the =extern= keyword.

#+begin_src C
	// Extern declaration
	extern int g_x;

	// Declaration of global variable g_x
	int g_x;
#+end_src

Declaration of global variables should go in source files. Extern declarations should go in header files.

*** Demonstrational code
This program will demonstrate accessing a global variable from a source file where it isn't declared. It will contain three files: =x.h=, =x.c= and =main.c=.

=x.h=:

#+begin_src C
	#ifndef X_H
	#define X_H

	// This variable is used to test external linkage of global variables
	extern int g_x;

	#endif
#+end_src

=x.c=:

#+begin_src C
	#include "x.h"

	// This variable is used to test external linkage of global variables
	int g_x;
#+end_src

=main.c=:

#+begin_src C
	#include <stdio.h>

	#include "x.h" // For g_x

	int main(void)
	{
		printf("The value of g_x is %d\n", g_x);
		return 0;
	}
#+end_src

You can compile this program with the following shell commands:

#+begin_src sh
	gcc -c x.c
	gcc -c main.c
	gcc x.o main.o -o extern_test
#+end_src

** Using structs across different source files
Struct definitions should be placed in header files. To use global variables with struct types across different source files, create [[extern_declarations][extern declarations]] like you would with other global variables.

See [[./struct.c][struct.c]] for general notes on structs.

** The static keyword in linkage
<<static>>

The =static= keyword has different meanings in different contexts.

+ When used on _functions and global variables_, =static= affects _linkage_
+ When used on _local variables_, =static= affects _variable lifetime_

In this section, I will cover how =static= affects linkage. See [[./static.c][static.c]] for its use on local variables.

=static= makes functions and global variables have *internal linkage*. To use =static= with a global variable, add =static= before the type in the declaration or initialization statement. To use =static= with a function, add =static= before the return type like so:

#+begin_src C
	static int sum(int x, int y);
	static int g_x;
#+end_src

You may want to use =static= for functions and global variables that you only need to use in one file.

Since =static= symbols don't have external linkage, you shouldn't put them in header files.

* Build systems
Compiling and linking an entire program is known as *building*.

A *build system* is a system that handles the execution of compiler commands needed to build a program, usually to automate the process.

In this section, we will explore various ways to set up build systems. As of <2024-02-03 Sat>, this section only details build systems that work on UNIX-like OSes such as macOS and GNU/Linux. You can use these build systems on Windows if you run them through [[https://www.msys2.org/][MSYS2]].

** Shell scripts
In my opinion, a shell script is the easiest-to-create and most basic build system. Depending on how you write them, they can make for fairly rudimentary build systems, but if your project is small in scope and its number of source files, you may get by with one.

On UNIX, a *shell script* is a file in which each line of text is a shell command that gets run. Like C, execution runs from top to bottom.

*** Writing a shell script
To write a shell script, open a new text file and name it whatever you want. Shell script filenames typically end in =.sh=.

On the first line of your script, we must write a *shebang*, which specifies what interpreter will execute the rest of the contents of the file. An *interpreter* is a program that reads code in text form and executes it line by line. To write the shebang, write =#!= followed by the absolute path to the interpreter program:

#+begin_src sh
	#!/bin/bash
#+end_src

Since we are writing a _shell_ script, I picked =bash=, the Bourne-Again SHell, as our interpreter. It is available on most Linux distros.

Now, we can start writing the commands we want the script to run, line by line:

#+begin_src sh
	#!/bin/bash

	# Test some stuff
	echo line 1
	echo line 2
	echo line 3
	echo Hello World!
#+end_src

Lines that start with =#=, besides the shebang, are comments.

*** Running a shell script
To run our shell script, we can type the path to it on the shell, starting with =./=, just like we would when running any other program.

You will probably get this error, though, if your shell script was newly created:

#+begin_src text
bash: ./script.sh: Permission denied
#+end_src

In this case, we need to give executable permissions to our file so we are able to execute it. You can do that with the =chmod= command:

#+begin_src sh
	chmod +x script.sh
#+end_src

Replace =script.sh= with the file you want to give executable permissions to.

Now you should be able to run your script.

*** Writing a shell script to build a program
We can make our shell script into a build system by populating it with compiler commands.

If we wanted to build our [[external_linkage_demo][external linkage demo program]], for example, we could use this script:

#+begin_src sh
	#!/bin/bash
	gcc -c sum.c
	gcc -c main.c
	gcc sum.o main.o -o program
#+end_src

Since the ultimate goal of the script is to build the program and we don't need the individual object files for anything, we could just compile and link everything in one command like so:

<<shell_script_build_system>>

#+begin_src sh
	#!/bin/bash
	gcc sum.c main.c -o program
#+end_src

*** Problems with this setup
The biggest issue with this shell script build system is that it re-compiles every source file in the program each time it is run. This can be problematic if we just made a small change to one source file and wanted to re-link the program. All that we need to do to re-link the program is recompile the _one_ source file we changed and re-link, however, this script compiles _all_ source files and links in one command, so we would have to run the compile commands on our own to get what we want. This issue will only be exacerbated as we add more source files to our program.

Still, though, if your program is fairly small, using a shell script like this as a build system is fine.

There also may be some way to use shell scripts to create more elaborate build systems than this, but I don't know enough about shell scripting to do that.

** Makefiles
I have learned most of what I know about makefiles through this tutorial website: [[https://makefiletutorial.com/][Makefile Tutorial By Example]]. It is very well written, possibly more so than my own writing, so check it out if you want. If you like the way I explain things, read on.

*** A basic intro to makefiles
A *makefile* is a text file that gets read by the UNIX utility =make=, which is used to run commands used to maintain groups of files that depend on each other. Most people use makefiles as build systems, but it's possible to use them for other purposes as well.

When you run =make= with no additional arguments, it will automatically try to find a makefile in the working directory named =makefile= or =Makefile=. If you use GNU make, it will also search for a makefile named =GNUmakefile=. It is recommended that you only name your makefile this if it uses a feature of GNU make that isn't present in other versions of =make=.

The goal of using makefiles as build systems is to create rule

**** Syntax
In a makefile, lines starting with =#= are comments.

**** Rules
***** Syntax of a rule
A *rule* is a section of a makefile that specifies what file(s) a file depends on to be created and what shell commands must be run to create the file. Rules follow this syntax:

#+begin_src makefile
	target: prerequisites ...
		recipe command 1
		recipe command 2
		recipe command 3
		...
#+end_src

The *target* is the file that needs to be created.

The *prerequisites* are one or more files, separated by a space character, that must exist for the target to be created. If any of the prerequisites are modified since the last time the target was created, the target will be re-created.

The *recipe* is the sequence of shell commands that are meant to create the target. Each command exists on its own line, tabbed up once from the target. The recipe ends when the tabulation stops.

***** How rules are processed
The first rule that gets processed depends on how =make= is run. If you run =make= with no additional arguments, the first rule that gets processed is the first rule that appears in the file when its read from top to bottom. If you run =make= with arguments that don't start with =-=, =make= will attempt to process the rules whose targets are the names of the arguments.

Before the recipe for a rule is run, =make= will ensure that the prerequisites have been created by processing the rules whose targets are the prerequisites.

***** Demo
Here is a demonstrational makefile to build our [[external_linkage_demo][external linkage demo program]]:

<<first_makefile_demo>>

#+begin_src makefile
	program: main.o sum.o
		gcc main.o sum.o -o program

	main.o: main.c sum.h
		gcc -c main.c

	sum.o: sum.c sum.h
		gcc -c sum.c
#+end_src

Running =make=, I get this output:

#+begin_src text
gcc -c main.c
gcc -c sum.c
gcc main.o sum.o -o program
#+end_src

=make= will print every recipe command it runs to standard output. To suppress this, you can add =@= to the start of the recipe commands you don't want to be echoed.

****** Pros of this build system
+ Unlike our [[shell_script_build_system][shell script]], it will only re-compile the source files whose dependencies changed since the last build
+ We can directly specify what files we want to create (e.g. running =make main.o= will run the recipe for =main.o=)

****** Cons of this build system
+ We have to write rules to create object files manually
+ We have to keep track of which object files depend on which headers

****** My personal thoughts on this build system
Despite the cons, I personally think that this build system is better than our [[shell_script_build_system][shell script]]. We can remedy having to manually write rules for object files by writing a makefile that automatically finds the source files used in our program and writes rules for them. I will later explain how to write one [[automated_makefile_begin][here]], but don't skip ahead to that without reading the rest of the content in this section, as it builds on such content.

Even without a makefile that automatically generates rules for source files, you can get by just fine. For example, see [[https://git.suckless.org/dwm/file/Makefile.html][the makefile for dwm]], a somewhat popular minimal window manager for X11.

**** Variables
We can use variables in makefiles to store and reuse text. Common variables to create include:
+ =CC= :: the C compiler to use
+ =CFLAGS= :: flags to pass to the C compiler when compiling source files
+ =LDFLAGS= :: flags to pass to the C compiler when linking object files

I personally like creating a variable for the program name named =BIN=.

To create a variable, write its name, then ":=" and its value.
To access a variable, use =$(VARIABLE_NAME)= or =${VARIABLE_NAME}=.

Just like in C, variables make our code easier to modify and help us follow the DRY principle.

***** Demo
Implementing variables into our [[first_makefile_demo][first makefile demo]], our new makefile may look like this:

<<second_makefile_demo>>

#+begin_src makefile
	CC := gcc

	# The -g flag includes debugging information in object files
	CFLAGS := -g

	# This stores no value
	LDFLAGS :=

	# Binary to build
	BIN := program

	$(BIN): main.o sum.o
		$(CC) main.o sum.o -o $(BIN) $(LDFLAGS)

	main.o: main.c sum.h
		$(CC) $(CFLAGS) -c main.c

	sum.o: sum.c sum.h
		$(CC) $(CFLAGS) -c sum.c
#+end_src

**** Phony targets
It is common practice to create rules that exist to easily run recipes rather than generate target files.

An example of this is creating a rule for the target =clean=, which will be used to store a recipe that removes the files generated during building:

#+begin_src makefile
	clean:
		# The asterisk (*) will match anything, so "*.o" will expand to all files ending in ".o" in the working directory
		# Be very careful when using * to remove files, as you wouldn't want to remove the wrong files
		rm *.o
#+end_src

Since =clean='s recipe doesn't actually generate a file named =clean=, =clean= is a *phony target*.

The problem with this is that, if a file named =clean= did exist, the recipe wouldn't run. To mark =clean= as a phony target so that it will run regardless, we can create a rule with the special traget =.PHONY= and add =clean= as a prerequisite:

#+begin_src
	.PHONY: clean
#+end_src

***** Demo
Adding a =clean= phony target to our [[second_makefile_demo][second makefile demo]], we get this:

<<third_makefile_demo>>

#+begin_src makefile
	CC := gcc

	# The -g flag includes debugging information in object files
	CFLAGS := -g

	# This stores no value
	LDFLAGS :=

	# Binary to build
	BIN := program

	$(BIN): main.o sum.o
		$(CC) main.o sum.o -o $(BIN) $(LDFLAGS)

	main.o: main.c sum.h
		$(CC) $(CFLAGS) -c main.c

	sum.o: sum.c sum.h
		$(CC) $(CFLAGS) -c sum.c

	.PHONY: clean

	clean:
		rm *.o
		rm $(BIN)
#+end_src

*** TODO Crazy automated makefile
<<automated_makefile_begin>>

In this section, I will explain how to create a makefile that automatically finds the source files in a given directory and generates rules for them. The makefile we create will be similar to [[https://codeberg.org/lukelawlor/soupdl/src/branch/main/Makefile][the one I use to build my game SoupDL 06]].

* Sources for these notes
+ For Linkage
  + [[https://www.geeksforgeeks.org/internal-linkage-external-linkage-c/][geeksforgeeks.org]]
  + [[https://learn.microsoft.com/en-us/cpp/c-language/linkage?view=msvc-170][microsoft.com]]
+ For Makefiles
  + [[https://makefiletutorial.com/][Makefile Tutorial By Example]]
  + [[https://www.gnu.org/software/make/manual/][GNU Make Manual]]
